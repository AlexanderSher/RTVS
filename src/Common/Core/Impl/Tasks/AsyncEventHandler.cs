// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

using System;
using System.Threading.Tasks;

namespace Microsoft.Common.Core.Tasks {
    /// <summary>
    /// Represents the method that will handle an event asynchonously.
    /// </summary>
    /// <typeparam name="TEventArgs">The type of the event data generated by the event</typeparam>
    /// <param name="sender">The source of the event.</param>
    /// <param name="e">An object that contains the event data.</param>
    /// <returns></returns>
    public delegate Task AsyncEventHandler<in TEventArgs>(object sender, TEventArgs e) where TEventArgs : EventArgs;

    public static class AsyncEventExtensions {
        public static Task InvokeAsync<TEventArgs>(this AsyncEventHandler<TEventArgs> handler, object sender, TEventArgs args)
            where TEventArgs : EventArgs {
            if (handler != null) {
                var listeners = handler.GetInvocationList();
                var tasks = new Task[listeners.Length];
                for (var i = 0; i < tasks.Length; i++) {
                    tasks[i] = ((AsyncEventHandler<TEventArgs>)listeners[i])(sender, args);
                }
                return Task.WhenAll(tasks);
            }
            return Task.CompletedTask;
        }
    }
}

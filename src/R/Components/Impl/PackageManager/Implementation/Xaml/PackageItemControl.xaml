<UserControl x:Class="Microsoft.R.Components.PackageManager.Implementation.Xaml.PackageItemControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:xaml="clr-namespace:Microsoft.R.Components.PackageManager.Implementation.Xaml"
             xmlns:components="clr-namespace:Microsoft.R.Components"
             xmlns:wpf="clr-namespace:Microsoft.R.Wpf;assembly=Microsoft.R.Wpf"
             xmlns:cwpf="clr-namespace:Microsoft.Common.Wpf;assembly=Microsoft.R.Common.Wpf"
             mc:Ignorable="d" 
             MinHeight="72"
             d:DesignHeight="90"
             d:DesignWidth="400">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <xaml:PackageManagerResources />
            </ResourceDictionary.MergedDictionaries>

            <!-- style for install, uninstall and update buttons -->
            <Style x:Key="ButtonStyle" TargetType="{x:Type Button}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Focusable="False" RecognizesAccessKey="True"
                                                  ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{DynamicResource {x:Static wpf:Brushes.ToolWindowButtonHoverActiveKey}}" />
                        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static wpf:Brushes.ToolWindowButtonHoverActiveBorderKey}}" />
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Setter Property="Background" Value="{DynamicResource {x:Static wpf:Brushes.ToolWindowButtonDownKey}}" />
                        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static wpf:Brushes.ToolWindowButtonDownBorderKey}}" />
                    </Trigger>
                </Style.Triggers>
            </Style>
        </ResourceDictionary>
    </UserControl.Resources>
    <UserControl.Template>
        <ControlTemplate TargetType="{x:Type UserControl}">
            <Border BorderThickness="0,0,0,0" BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" Background="Transparent" Padding="0,8,0,0">
                <Grid Margin="16,0,7,0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                    <!-- check box -->
                    <CheckBox Grid.Column="0" Margin="0,12,8,0" VerticalAlignment="top" IsChecked="{Binding Selected}"
                                          Visibility="{Binding Path=CheckBoxesEnabled, RelativeSource={RelativeSource AncestorType={x:Type xaml:InfiniteScrollList}}, Converter={x:Static wpf:Converters.FalseIsCollapsed}}"/>

                    <!-- Icon -->
                    <Grid Grid.Column="1" VerticalAlignment="Top">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Image Grid.Row="0" Style="{StaticResource PackageIconImageStyle}" VerticalAlignment="Top" Margin="0,0,16,0" />
                        <Border Grid.Row="0" Margin="18,20,0,0" Width="16" Height="16" VerticalAlignment="Top" Child="{StaticResource IconInstalledIndicator}"
                                Visibility="{Binding Path=IsInstalled, Converter={x:Static wpf:Converters.FalseIsCollapsed}}"
                                ToolTip="{x:Static components:Resources.PackageManager_PackageInstalledToolTip}" />
                        <Border Grid.Row="0" Margin="18,20,0,0" Width="16" Height="16" VerticalAlignment="Top" Child="{StaticResource IconUpdateAvailableIndicator}"
                                Visibility="{Binding Path=IsUpdateAvailable, Converter={x:Static wpf:Converters.FalseIsCollapsed}}"
                                ToolTip="{x:Static components:Resources.PackageManager_UpdateAvailableToolTip}" />

                        <TextBlock Grid.Row="1" Text="{x:Static components:Resources.PackageManager_Prerelease}" FontSize="9" Margin="0,3,0,0" HorizontalAlignment="Left"
                                   Visibility="{Binding Path=IsPrereleaseVersion, Converter={x:Static wpf:Converters.FalseIsCollapsed}}" />
                    </Grid>

                    <!-- title & summary-->
                    <Grid Grid.Column="2" VerticalAlignment="Top" MinHeight="48">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="4" />
                            <RowDefinition Height="36" MaxHeight="36" />
                        </Grid.RowDefinitions>
                        <TextBlock Grid.Row="0" FontWeight="Bold" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" VerticalAlignment="Top" Text="{Binding Path=Id}"
                                   FontSize="{Binding ElementName=_self, Path=FontSize, Converter={x:Static wpf:Converters.FontScale122}}" />

                        <TextBlock Grid.Row="2" TextTrimming="CharacterEllipsis" TextWrapping="Wrap"
                                   Text="{Binding Path=Summary, Converter={cwpf:Lambda '(string s) => string.IsNullOrEmpty(s) ? Microsoft.R.Components.Resources.PackageManager_NotAvailableInSource : s'}}"
                                   FontStyle="{Binding Path=Summary, Converter={cwpf:Lambda '(string s) => string.IsNullOrEmpty(s) ? System.Windows.FontStyles.Italic : System.Windows.FontStyles.Normal'}}" />

                        <Grid.ToolTip>
                            <TextBlock Style="{StaticResource TooltipStyle}">
                                <Run Text="{Binding Path=Id}" FontWeight="Bold" />
                                <LineBreak />
                                <Run Text="{Binding Path=Summary}" />
                            </TextBlock>
                        </Grid.ToolTip>
                    </Grid>

                    <Grid Grid.Column="3" VerticalAlignment="Top" Margin="10,0,0,0">
                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="auto" />
                            <ColumnDefinition Width="auto" />
                        </Grid.ColumnDefinitions>

                        <!-- row 0: -->
                        <Grid Grid.Row="0" Grid.Column="0" HorizontalAlignment="Right">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="auto" />
                                <ColumnDefinition Width="auto" />
                            </Grid.ColumnDefinitions>

                            <!-- installed indicator -->
                            <Border x:Name="_installedIndicator" Grid.Column="0" Width="12" Height="12" Visibility="Visible" VerticalAlignment="Center" Child="{StaticResource IconGrayInstalledIndicator}" />

                            <!-- installed version -->
                            <TextBlock x:Name="TextInstalledVersion" Grid.Column="1" Margin="4,0,4,0" VerticalAlignment="Center" Visibility="Hidden"
                                       Text="{Binding Path=InstalledVersion, StringFormat={}v{0}}"
                                       ToolTip="{Binding Path=InstalledVersion, StringFormat={x:Static components:Resources.PackageManager_InstalledVersionToolTip}}" />
                        </Grid>

                        <!-- version to install. It occupies the same position as the installed version -->
                        <TextBlock x:Name="_versionToInstall" Grid.Row="0" Grid.Column="0" Margin="2,0,4,0" VerticalAlignment="Center" TextAlignment="Right" Visibility="Hidden"
                                   Text="{Binding Path=LatestVersion, StringFormat={}v{0}}"
                                   ToolTip="{Binding Path=LatestVersion, StringFormat={x:Static components:Resources.PackageManager_LatestVersionToolTip}}">
                        </TextBlock>

                        <!-- uninstall button -->
                        <Button x:Name="ButtonUninstall" Style="{StaticResource ButtonStyle}" Grid.Row="0" Grid.Column="1" Visibility="Hidden"
                                Click="ButtonUninstall_Click" ToolTip="{x:Static components:Resources.PackageManager_UninstallButtonToolTip}">
                            <Border Child="{StaticResource IconUninstall}" Width="16" Height="16" />
                        </Button>

                        <!-- install button. It occupies the same position of the install button -->
                        <Button x:Name="ButtonInstall" Grid.Row="0" Grid.Column="1" Style="{StaticResource ButtonStyle}" Click="ButtonInstall_Click" Visibility="Hidden">
                            <Button.ToolTip>
                                <MultiBinding StringFormat="{x:Static components:Resources.PackageManager_InstallButtonToolTip}">
                                    <Binding Path="Id" />
                                    <Binding Path="LatestVersion" />
                                </MultiBinding>
                            </Button.ToolTip>
                            <Border Child="{StaticResource IconInstall}" Width="16" Height="16" />
                        </Button>

                        <!-- row 1: latest version and the update button-->
                        <!-- version to update to -->
                        <TextBlock x:Name="TextVersionToUpdateTo" Grid.Row="1" Grid.Column="0" Margin="2,5,4,0" VerticalAlignment="Center" TextAlignment="Right" Visibility="Hidden"
                                   Text="{Binding Path=LatestVersion, StringFormat={}v{0}}">
                            <TextBlock.ToolTip>
                                <Binding Path="LatestVersion" StringFormat="{x:Static components:Resources.PackageManager_LatestVersionToolTip}" />
                            </TextBlock.ToolTip>
                        </TextBlock>

                        <!-- update button -->
                        <Button x:Name="ButtonUpdate" Grid.Row="1" Grid.Column="1" Style="{StaticResource ButtonStyle}" Margin="0,5,0,0" Click="ButtonUpdate_Click" Visibility="Hidden">
                            <Button.ToolTip>
                                <MultiBinding StringFormat="{x:Static components:Resources.PackageManager_UpdateButtonToolTip}">
                                    <Binding Path="Id" />
                                    <Binding Path="LatestVersion" />
                                </MultiBinding>
                            </Button.ToolTip>
                            <Border Child="{StaticResource IconUpdateAvailableIndicator}" Width="16" Height="16" />
                        </Button>
                    </Grid>
                </Grid>
            </Border>

            <!-- triggers -->
            <ControlTemplate.Triggers>
                <!-- The install button is visible when
                    * IsSolution is false;
                    * Status is NotInstalled;
                    * mouse hovers over the control;
                -->
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                        <Condition Binding="{Binding Status}" Value="NotInstalled" />
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="ButtonInstall" Property="Visibility" Value="Visible" />
                </MultiDataTrigger>

                <!-- installed version is visible when
                    * IsSolution is false;
                    * InstalledVersion is not null;
                -->
                <DataTrigger Binding="{Binding InstalledVersion, Converter={x:Static wpf:Converters.NullIsTrue}}" Value="False">
                    <Setter TargetName="TextInstalledVersion" Property="Visibility" Value="Visible" />
                </DataTrigger>

                <!-- version to install is visible when
                                     * Status is NotInstalled
                                     * Or IsSolution is true
                                -->
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=Status}" Value="NotInstalled" />
                        <Condition Binding="{Binding Path=LatestVersion, Converter={x:Static wpf:Converters.NullIsTrue}}" Value="False" />
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="_versionToInstall" Property="Visibility" Value="Visible" />
                </MultiDataTrigger>

                <!-- version to update to is visible when
                    * Status is UpdateAvailable;
                    * IsSolution is false
                -->
                <DataTrigger Binding="{Binding Path=Status}" Value="UpdateAvailable">
                    <Setter TargetName="TextVersionToUpdateTo" Property="Visibility" Value="Visible" />
                </DataTrigger>

                <!-- The uninstall button is visible when
                    * IsSolution is false;
                    * Status is Installed or UpdateAvailable;
                    * mouse hovers over the control;
                    Since there is no OR condition in triggers, we need to use two triggers instead.
                -->
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                        <Condition Binding="{Binding Path=Status}" Value="Installed" />
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="ButtonUninstall" Property="Visibility" Value="Visible" />
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                        <Condition Binding="{Binding Path=Status}" Value="UpdateAvailable" />
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="ButtonUninstall" Property="Visibility" Value="Visible" />
                </MultiDataTrigger>

                <!-- The update button is visible when
                        * IsSolution is false;
                        * Status is UpdateAvailable;
                        * mouse hovers over the control;
                -->
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                        <Condition Binding="{Binding Path=Status}" Value="UpdateAvailable" />
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="ButtonUpdate" Property="Visibility" Value="Visible" />
                </MultiDataTrigger>

                <!-- The installed version indicator becomes invisible when
                    * IsSolution is true; or
                    * InstalledVersion is null;
                -->
                <DataTrigger Binding="{Binding Path=InstalledVersion}" Value="{x:Null}">
                    <Setter TargetName="_installedIndicator" Property="Visibility" Value="Collapsed" />
                </DataTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </UserControl.Template>
</UserControl>

<UserControl x:Class="Microsoft.R.Components.PackageManager.Implementation.Xaml.InfiniteScrollList"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:xaml="clr-namespace:Microsoft.R.Components.PackageManager.Implementation.Xaml"
             xmlns:nuget="clr-namespace:Microsoft.R.Wpf;assembly=Microsoft.R.Wpf"
             xmlns:components="clr-namespace:Microsoft.R.Components"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300">
    <UserControl.Resources>
        <!--
        <nuget:InfiniteScrollListItemStyleSelector x:Key="itemStyleSelector" />
        
        <DataTemplate DataType="{x:Type nuget:PackageDependencyMetadata}">
            <TextBlock Text="{Binding}" />
        </DataTemplate>

        <DataTemplate DataType="{x:Type nuget:PackageItemListViewModel}">
            <nuget:PackageItemControl DataContext="{Binding}" />
        </DataTemplate>
        -->

        <!-- Template used by ListBoxItem that represents a package. -->
        <ControlTemplate x:Key="ListBoxItemTemplate" TargetType="{x:Type ListBoxItem}">
            <Border x:Name="Bd" BorderThickness="0" Background="{TemplateBinding Background}" Padding="0" SnapsToDevicePixels="true">
                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            </Border>
            <ControlTemplate.Triggers>
                <!-- set the background for IsEnabled == false -->
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static nuget:Brushes.ListPaneBackground}}" />
                </Trigger>

                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsMouseOver" Value="True" />
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static nuget:Brushes.ContentMouseOverBrushKey}}" />
                    <Setter Property="TextBlock.Foreground" Value="{DynamicResource {x:Static nuget:Brushes.ContentMouseOverTextBrushKey}}" />
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="Selector.IsSelectionActive" Value="False" />
                        <Condition Property="IsSelected" Value="True" />
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static nuget:Brushes.ContentInactiveSelectedBrushKey}}" />
                    <Setter Property="TextBlock.Foreground" Value="{DynamicResource {x:Static nuget:Brushes.ContentInactiveSelectedTextBrushKey}}" />
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="Selector.IsSelectionActive" Value="True" />
                        <Condition Property="IsSelected" Value="True" />
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static nuget:Brushes.ContentSelectedBrushKey}}" />
                    <Setter Property="TextBlock.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static nuget:Brushes.ContentSelectedTextBrushKey}}" />
                </MultiTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <!-- Template used by the LoadingIndicator. We use it to disable the background change when mouse hovers over it. -->
        <ControlTemplate x:Key="LoadingIndicatorListBoxItemTemplate" TargetType="{x:Type ListBoxItem}">
            <Border x:Name="Bd" BorderThickness="0" Background="{DynamicResource {x:Static nuget:Brushes.ListPaneBackground}}" Padding="0" SnapsToDevicePixels="true">
                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            </Border>
        </ControlTemplate>

        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- the base style of the ListBoxItem. -->
        <Style x:Key="ListBoxItemStyle" TargetType="{x:Type ListBoxItem}">
            <Setter Property="Padding" Value="0" />
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        </Style>

        <!-- the style of the ListBoxItem when the item is the loading status indicator. -->
        <Style x:Key="LoadingStatusIndicatorStyle" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource ListBoxItemStyle}">
            <Setter Property="Template" Value="{StaticResource LoadingIndicatorListBoxItemTemplate}" />
            <Setter Property="Focusable" Value="False" />
        </Style>

        <!-- the style of the ListBoxItem when the item is a package. -->
        <Style x:Key="PackageItemStyle" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource ListBoxItemStyle}"> 
            <!--
                Note that we cannot set the template property in xaml list this:

               <Setter Property="Template" Value="{StaticResource ListBoxItemTemplate}" />

                The reason is that the template referenes resources defined in VisualStudio, which are obviously not
                available when this is used in the standalone mode, i.e. outside of VisualStudio. So the setter is
                added by code when Standalone == false.
            -->
        </Style>

        <Style TargetType="FrameworkElement" x:Key="FadeAnimationStyle">
            <Setter Property="Visibility" Value="Hidden"/>
            <Style.Triggers>
                <Trigger Property="Visibility" Value="Visible">
                    <Trigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0.0" To="1.0" Duration="0:0:0.7"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </Trigger.EnterActions>
                </Trigger>
            </Style.Triggers>
        </Style>
        
        <!--
            This scrollviewer template has one change from the default - a -22 margin on the verical srollbar.
            This enables the loadingStatusBar to appear to be in the listbox.
        -->
        <ControlTemplate x:Key="ScrollViewerWithScrollBarExtraLargeOnTop" TargetType="{x:Type ScrollViewer}">
            <Grid x:Name="Grid" Background="{TemplateBinding Background}" >
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Rectangle x:Name="Corner" Grid.Column="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" Grid.Row="1"/>
                <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="0"/>
                <ScrollBar x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Margin="0,-22,0,0" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}"/>
                <ScrollBar x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
            </Grid>
        </ControlTemplate>
    </UserControl.Resources>
    <DockPanel LastChildFill="True">
        <Border x:Name="UpdateButtonContainer" DockPanel.Dock="Top" BorderThickness="0,0,0,1"
                BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}"
                Background="{DynamicResource {x:Static nuget:Brushes.LegalMessageBackground}}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="auto" />
                </Grid.ColumnDefinitions>
                <CheckBox x:Name="CheckBoxSelectAllPackages" Grid.Column="0" Margin="16, 8" VerticalAlignment="Center"
                          Checked="CheckBoxSelectAllPackages_Checked" Unchecked="CheckBoxSelectAllPackages_Unchecked"
                          Foreground="{DynamicResource {x:Static nuget:Brushes.UIText}}" Content="{x:Static components:Resources.PackageManager_SelectAllPackages}" />
                <Button x:Name="ButtonUpdate" Grid.Column="2" MinWidth="100" MinHeight="24" Margin="24,8" VerticalAlignment="Center"
                        Click="ButtonUpdate_Click" Content="{x:Static components:Resources.Update}" />
            </Grid>
        </Border>
        <Grid DockPanel.Dock="Top" Background="{DynamicResource {x:Static nuget:Brushes.ListPaneBackground}}" Height="22">
            <xaml:LoadingStatusBar x:Name="LoadingStatusBar" Style="{StaticResource FadeAnimationStyle}" />
        </Grid>
        <ListBox x:Name="List" DockPanel.Dock="Bottom" Background="{DynamicResource {x:Static nuget:Brushes.ListPaneBackground}}" Foreground="{DynamicResource {x:Static nuget:Brushes.UIText}}"
                 ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Visible" ItemContainerStyleSelector="{DynamicResource itemStyleSelector}"
                 VirtualizingPanel.IsVirtualizing="true" VirtualizingPanel.VirtualizationMode="Recycling" VirtualizingPanel.CacheLength="1,2" VirtualizingPanel.CacheLengthUnit="Page"
                 PreviewKeyUp="List_PreviewKeyUp" SelectionChanged="List_SelectionChanged" Loaded="List_Loaded" HorizontalContentAlignment="Stretch" BorderThickness="0,0,0,0" ItemsSource="{Binding}">
            <!-- set the template to disable the background change when the IsEnabled is false. -->
            <ListBox.Template>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="1" SnapsToDevicePixels="true">
                        <ScrollViewer Template="{StaticResource ScrollViewerWithScrollBarExtraLargeOnTop}" Focusable="false" Padding="{TemplateBinding Padding}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </ListBox.Template>
        </ListBox>
    </DockPanel>
</UserControl>

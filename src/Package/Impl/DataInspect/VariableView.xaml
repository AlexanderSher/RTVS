<UserControl x:Class="Microsoft.VisualStudio.R.Package.DataInspect.VariableView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Microsoft.VisualStudio.R.Package.DataInspect"
             xmlns:vsui="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.14.0"
             xmlns:vsshell="clr-namespace:Microsoft.VisualStudio.Shell;assembly=Microsoft.VisualStudio.Shell.14.0"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300"
             Foreground="{DynamicResource {x:Static vsui:CommonControlsColors.TextBoxTextBrushKey}}"
             HorizontalAlignment="Stretch">

    <UserControl.Resources>
        <ResourceDictionary>
            <Style x:Key="HeaderScrollViewerControlTemplate" TargetType="{x:Type local:HeaderScrollViewer}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type local:HeaderScrollViewer}">
                            <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <ContentPresenter Content="{TemplateBinding Header}" />
                                <Rectangle x:Name="Corner"
                                   Grid.Column="1"
                                   Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" Grid.Row="2"/>
                                <ScrollContentPresenter
                                    x:Name="PART_ScrollContentPresenter"
                                    CanContentScroll="{TemplateBinding CanContentScroll}"
                                    CanHorizontallyScroll="False" CanVerticallyScroll="True"
                                    ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}"
                                    Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="1"/>
                                <ScrollBar x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar"
                                   Cursor="Arrow"
                                   Grid.Column="1" Grid.Row="0" Grid.RowSpan="2"
                                   Maximum="{TemplateBinding ScrollableHeight}" Minimum="0"
                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                   Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                   ViewportSize="{TemplateBinding ViewportHeight}"
                                   Style="{DynamicResource {x:Static vsshell:VsResourceKeys.ScrollBarStyleKey}}"/>
                                <ScrollBar x:Name="PART_HorizontalScrollBar"
                                   AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow"
                                   Grid.Column="0" Grid.Row="2"
                                   Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal"
                                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                   Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                   ViewportSize="{TemplateBinding ViewportWidth}"
                                   Style="{DynamicResource {x:Static vsshell:VsResourceKeys.ScrollBarStyleKey}}"/>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ColumnHeaderGripperStyle" TargetType="{x:Type Thumb}">
                <Setter Property="Width" Value="8"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Cursor" Value="SizeWE"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Thumb}">
                            <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary>
                    <local:LevelToIndentConverter x:Key="LevelToIndentConverter" />

                    <Style x:Key="CellBorderStyle" TargetType="{x:Type Border}">
                        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static vsui:EnvironmentColors.GridLineBrushKey}}"/>
                        <Setter Property="BorderThickness" Value="0,0,1,0"/>
                        <Setter Property="SnapsToDevicePixels" Value="True"/>
                    </Style>

                    <Style x:Key="CellTextBlockStyle" TargetType="{x:Type TextBlock}">
                        <Setter Property="Padding" Value="3,0,3,0" />
                        <Setter Property="TextWrapping" Value="NoWrap" />
                        <Setter Property="ClipToBounds" Value="True" />
                        <Setter Property="FontFamily" Value="Consolas" />
                        <Setter Property="Foreground" Value="{DynamicResource {x:Static vsui:CommonControlsColors.TextBoxTextBrushKey}}" />
                    </Style>
                    
                    <HierarchicalDataTemplate ItemsSource="{Binding Children}"
                                  DataType="{x:Type local:Variable}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Border Grid.Column="0" Style="{DynamicResource CellBorderStyle}" Width="{Binding ValueWidth}">
                                <TextBlock Text="{Binding VariableValue}" Style="{StaticResource CellTextBlockStyle}"/>
                            </Border>
                            <Border Grid.Column="1" Style="{DynamicResource CellBorderStyle}" Width="{Binding TypeWidth}">
                                <TextBlock Text="{Binding TypeName}" Style="{StaticResource CellTextBlockStyle}"/>
                            </Border>
                        </Grid>
                    </HierarchicalDataTemplate>

                    <Style x:Key="TreeViewItemStyle" TargetType="{x:Type TreeViewItem}">
                        <Setter Property="Background" Value="{DynamicResource {x:Static vsui:TreeViewColors.BackgroundBrushKey}}"/>
                        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
                        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
                        <!--<Setter Property="Foreground" Value="{DynamicResource {x:Static wpf:Controls.ForegroundKey}}"/>-->
                        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static vsui:EnvironmentColors.GridLineBrushKey}}"/>
                        <Setter Property="BorderThickness" Value="0,0,0,1" />
                        <Setter Property="FocusVisualStyle">
                            <Setter.Value>
                                <Style>
                                    <Setter Property="Control.Template">
                                        <Setter.Value>
                                            <ControlTemplate>
                                                <Rectangle/>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                                    <Grid HorizontalAlignment="Stretch">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition/>
                                        </Grid.RowDefinitions>

                                        <Border Grid.Row="0"
                                                x:Name="Bd"
                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                BorderThickness="{TemplateBinding BorderThickness}"
                                                Background="{TemplateBinding Background}"
                                                SnapsToDevicePixels="True">
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="*"/>
                                                </Grid.ColumnDefinitions>
                                                
                                                <Grid Width="{Binding NameWidth}">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="Auto"/>
                                                        <ColumnDefinition MinWidth="19" Width="Auto" />
                                                        <ColumnDefinition Width="*" />
                                                    </Grid.ColumnDefinitions>
                                                    <Rectangle Width="{Binding Path=IndentStep, Converter={StaticResource LevelToIndentConverter}}" />
                                                    <ToggleButton x:Name="Expander"
                                                              Grid.Column="1"
                                                              ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}">
                                                        <ToggleButton.Style>
                                                            <Style TargetType="{x:Type ToggleButton}">
                                                                <Setter Property="Focusable" Value="False"/>
                                                                <Setter Property="Width" Value="16"/>
                                                                <Setter Property="Height" Value="16"/>
                                                                <Setter Property="Template">
                                                                    <Setter.Value>
                                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                            <Border Background="Transparent" Height="16" Padding="5" Width="16">
                                                                                <Path x:Name="ExpandPath" Data="M0,0 L0,6 L6,0 z" Fill="White" Stroke="#FF818181">
                                                                                    <Path.RenderTransform>
                                                                                        <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                                                                                    </Path.RenderTransform>
                                                                                </Path>
                                                                            </Border>
                                                                            <ControlTemplate.Triggers>
                                                                                <Trigger Property="IsChecked" Value="True">
                                                                                    <Setter Property="RenderTransform" TargetName="ExpandPath">
                                                                                        <Setter.Value>
                                                                                            <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                                                                        </Setter.Value>
                                                                                    </Setter>
                                                                                    <Setter Property="Fill" TargetName="ExpandPath" Value="#FF595959"/>
                                                                                    <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF262626"/>
                                                                                </Trigger>
                                                                                <Trigger Property="IsMouseOver" Value="True">
                                                                                    <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF27C7F7"/>
                                                                                    <Setter Property="Fill" TargetName="ExpandPath" Value="#FFCCEEFB"/>
                                                                                </Trigger>
                                                                                <MultiTrigger>
                                                                                    <MultiTrigger.Conditions>
                                                                                        <Condition Property="IsMouseOver" Value="True"/>
                                                                                        <Condition Property="IsChecked" Value="True"/>
                                                                                    </MultiTrigger.Conditions>
                                                                                    <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF1CC4F7"/>
                                                                                    <Setter Property="Fill" TargetName="ExpandPath" Value="#FF82DFFB"/>
                                                                                </MultiTrigger>
                                                                            </ControlTemplate.Triggers>
                                                                        </ControlTemplate>
                                                                    </Setter.Value>
                                                                </Setter>
                                                            </Style>
                                                        </ToggleButton.Style>
                                                    </ToggleButton>
                                                    <Border Grid.Column="2" Style="{DynamicResource CellBorderStyle}">
                                                        <TextBlock Text="{Binding VariableName}" Style="{StaticResource CellTextBlockStyle}"/>
                                                    </Border>
                                                </Grid>
                                                
                                                <ContentPresenter x:Name="PART_Header" Grid.Column="1"
                                                                  ContentTemplate="{TemplateBinding HeaderTemplate}"
                                                                  Content="{TemplateBinding Header}"
                                                                  ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                                                  ContentSource="Header"
                                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                            </Grid>
                                        </Border>
                                        <ItemsPresenter x:Name="ItemsHost" Grid.Row="1"/>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsExpanded" Value="False">
                                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                                        </Trigger>
                                        <Trigger Property="HasItems" Value="False">
                                            <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                                        </Trigger>
                                        <Trigger Property="IsSelected" Value="True">
                                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static vsui:TreeViewColors.SelectedItemActiveBrushKey}}"/>
                                            <Setter Property="Foreground" Value="{DynamicResource {x:Static vsui:TreeViewColors.SelectedItemActiveTextBrushKey}}"/>
                                        </Trigger>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsSelected" Value="True"/>
                                                <Condition Property="IsSelectionActive" Value="False"/>
                                            </MultiTrigger.Conditions>
                                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static vsui:TreeViewColors.SelectedItemActiveBrushKey}}"/>
                                            <Setter Property="Foreground" Value="{DynamicResource {x:Static vsui:TreeViewColors.SelectedItemActiveTextBrushKey}}"/>
                                        </MultiTrigger>
                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter Property="Foreground" Value="{DynamicResource {x:Static vsui:CommonControlsColors.TextBoxTextDisabledBrushKey}}"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="True">
                                <Setter Property="ItemsPanel">
                                    <Setter.Value>
                                        <ItemsPanelTemplate>
                                            <VirtualizingStackPanel IsItemsHost="True"/>
                                        </ItemsPanelTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </ResourceDictionary>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </UserControl.Resources>

    <Grid x:Name="RootGrid" Grid.IsSharedSizeScope="True">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="3">
            <TextBlock x:Name="EnvironmentTextBlockLabel" Text="Environment: "></TextBlock>
            <TextBlock x:Name="EnvironmentTextBlock" Text="No R Interactive" /> <!-- TODO: use resource for text -->
        </StackPanel>
        <local:HeaderScrollViewer  Grid.Row="1"
                                  Style="{StaticResource HeaderScrollViewerControlTemplate}"
                                  VerticalScrollBarVisibility="Visible" HorizontalScrollBarVisibility="Disabled">
            <local:HeaderScrollViewer.Header>
                <Grid x:Name="HeaderRowGrid" Margin="1,0,1,0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>

                    <Grid.Resources>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="TextWrapping" Value="NoWrap" />
                            <Setter Property="ClipToBounds" Value="True" />
                            <Setter Property="TextAlignment" Value="Left" />
                            <Setter Property="Padding" Value="8,3,8,3" />
                        </Style>
                        <Style TargetType="{x:Type Border}">
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static vsui:CommonControlsColors.ButtonBorderBrushKey}}"/>
                            <Setter Property="BorderThickness" Value="0,1,1,1"/>
                            <Setter Property="SnapsToDevicePixels" Value="True"/>
                        </Style>
                    </Grid.Resources>

                    <Border x:Name="NameColumn" Grid.Column="0" BorderThickness="1" Width="200">
                        <TextBlock Text="Name" />
                    </Border>
                    <Border  x:Name="ValueColumn" Grid.Column="1">
                        <Grid>
                            <TextBlock Text="Value"/>
                            <Thumb x:Name="LeftThumb" HorizontalAlignment="Left" Style="{StaticResource ColumnHeaderGripperStyle}"/>
                            <Thumb x:Name="RightThumb" HorizontalAlignment="Right" Style="{StaticResource ColumnHeaderGripperStyle}"/>
                        </Grid>
                    </Border>
                    <Border x:Name="TypeColumn" Grid.Column="2" Width="100">
                        <TextBlock Text="Type"/>
                    </Border>
                </Grid>
            </local:HeaderScrollViewer.Header>

            <TreeView x:Name="RootTreeView"  BorderThickness="0" Grid.Row="1"
                Background="Transparent"
                ItemContainerStyle="{DynamicResource TreeViewItemStyle}"
                HorizontalContentAlignment="Stretch">

            </TreeView>
        </local:HeaderScrollViewer>
    </Grid>
</UserControl>
